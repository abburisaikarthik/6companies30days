// my version without using random ðŸ’€
class Solution {
    int i=0,j=0;
     int m=0;int n=0;

    public Solution(int m, int n) {
        this.m=m;
        this.n=n;
    }
    
    public int[] flip() {
        j++;
        if(j==n){
            j=0;
            i++;
        }
        if(i==m){
            i=0;
            j=0;
        }

             
        return new int[]{i,j};
        
    }
    
    public void reset() {
        
    }
}


// with using random function
  class Solution 
{
    private Map<Integer, Integer> map;
    private int rows, cols, total;
    private Random rand;
    
    public Solution(int n_rows, int n_cols) 
	{
        map = new HashMap<>();
        rand = new Random();
        rows = n_rows; 
        cols = n_cols; 
        total = rows * cols;
    }
    
    public int[] flip() 
	{
        // generate index, decrease total number of values
        int r = rand.nextInt(total--); 
		
        // check if we have already put something at this index
        int x = map.getOrDefault(r, r); 
		
        // swap - put total at index that we generated
        map.put(r, map.getOrDefault(total, total)); 
		
        return new int[]{x / cols, x % cols}; 
    }
    
    public void reset() 
	{
         map.clear()
        total = rows * cols; 
    }
}
// ref :https://www.youtube.com/watch?v=hrL_01NUFOE
