/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) 
    {
        Map<Integer, ArrayList<Integer>>map = new HashMap();
        convert(root , 0 ,map );
        Queue<Integer>q = new LinkedList();
        q.add(start);
        Set<Integer>vis = new HashSet();
        vis.add(start);
        int ans =0;
        while(!q.isEmpty())
        {
            int sz = q.size();
            for(int i =0;i<sz;i++)
            {
                int curr = q.poll();
                for(int num : map.get(curr))
                {
                    if(vis.add(num))
                    {
                        q.add(num);
                    }
                }
                
            }
            ans++;

        }
        return ans-1;

    }

    void convert(TreeNode curr , int parent ,Map<Integer, ArrayList<Integer>>map )
    {
        if(curr==null)return;
        if(!map.containsKey(curr.val))map.put(curr.val , new ArrayList());

        ArrayList<Integer>list = map.get(curr.val);
        if(parent!=0)list.add(parent);
        if(curr.left!=null)list.add(curr.left.val);
        if(curr.right!=null)list.add(curr.right.val);
        convert(curr.left,curr.val,map);
        convert(curr.right , curr.val , map);
    }
}
