class Solution {
    public int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        int lo = 1;
        int hi = Integer.MAX_VALUE;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (ispossible(mid, divisor1, divisor2, uniqueCnt1, uniqueCnt2))
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
    }

    public boolean ispossible(long num, long d1, long d2, long cnt1, long cnt2) {
        long divbyd1d2 = num / lcm(d1, d2);
        long divbyonlyd1 = num / d1 - divbyd1d2;
        long divbyonlyd2 = num / d2 - divbyd1d2;
        long rest = num - (divbyd1d2 + divbyonlyd1 + divbyonlyd2);
        if (cnt1 > divbyonlyd2)
            rest -= (cnt1 - divbyonlyd2);
        if (cnt2 > divbyonlyd1)
            rest -= (cnt2 - divbyonlyd1);
        if (rest >= 0)
            return true;
        return false;
    }

    public long lcm(long d1, long d2) {
        return (d1 * d2) / gcd(d1, d2);
    }

    public long gcd(long a, long b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

}
// ref - https://www.youtube.com/watch?v=gLi1UGe-oC4
