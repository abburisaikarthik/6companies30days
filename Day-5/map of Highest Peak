class Solution {
    public int[][] highestPeak(int[][] a) 
    {
        int m = a.length, n =a[0].length;
        Queue<int []>bfs = new LinkedList();
        int[][] ans = new int[m][n];
        for(int i =0;i<m;i++)
        {
            for(int j =0;j<n;j++)
            {
                if(a[i][j]==1)
                {
                    ans [i][j]=0;
                    bfs.offer(new int []{i,j});
                }
                else 
                {
                    ans[i][j]=-1;
                }
            }
        }

int xdir []= new int []{0,1,0,-1};
int ydir []= new int []{1,0,-1,0};
        while(!bfs.isEmpty())
        {
            int top [] = bfs.poll();
            int i = top [0];
            int j = top[1];
            for(int ind =0;ind<4;ind++)
            {
                int x = i+xdir[ind] , y = j+ydir[ind];
                if(x<0||x==m||y<0||y==n||ans[x][y]!=-1)continue;
                ans[x][y] = ans [i][j]+1;
                bfs.offer(new int []{x,y});
            }

        }
        return ans;
    }
}
